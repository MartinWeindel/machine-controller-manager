// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	machine "github.com/gardener/machine-controller-manager/pkg/apis/machine"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVMwareMachineClasses implements VMwareMachineClassInterface
type FakeVMwareMachineClasses struct {
	Fake *FakeMachine
	ns   string
}

var vmwaremachineclassesResource = schema.GroupVersionResource{Group: "machine.sapcloud.io", Version: "", Resource: "vmwaremachineclasses"}

var vmwaremachineclassesKind = schema.GroupVersionKind{Group: "machine.sapcloud.io", Version: "", Kind: "VMwareMachineClass"}

// Get takes name of the vMwareMachineClass, and returns the corresponding vMwareMachineClass object, and an error if there is any.
func (c *FakeVMwareMachineClasses) Get(name string, options v1.GetOptions) (result *machine.VMwareMachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(vmwaremachineclassesResource, c.ns, name), &machine.VMwareMachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*machine.VMwareMachineClass), err
}

// List takes label and field selectors, and returns the list of VMwareMachineClasses that match those selectors.
func (c *FakeVMwareMachineClasses) List(opts v1.ListOptions) (result *machine.VMwareMachineClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(vmwaremachineclassesResource, vmwaremachineclassesKind, c.ns, opts), &machine.VMwareMachineClassList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &machine.VMwareMachineClassList{ListMeta: obj.(*machine.VMwareMachineClassList).ListMeta}
	for _, item := range obj.(*machine.VMwareMachineClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested vMwareMachineClasses.
func (c *FakeVMwareMachineClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(vmwaremachineclassesResource, c.ns, opts))

}

// Create takes the representation of a vMwareMachineClass and creates it.  Returns the server's representation of the vMwareMachineClass, and an error, if there is any.
func (c *FakeVMwareMachineClasses) Create(vMwareMachineClass *machine.VMwareMachineClass) (result *machine.VMwareMachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(vmwaremachineclassesResource, c.ns, vMwareMachineClass), &machine.VMwareMachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*machine.VMwareMachineClass), err
}

// Update takes the representation of a vMwareMachineClass and updates it. Returns the server's representation of the vMwareMachineClass, and an error, if there is any.
func (c *FakeVMwareMachineClasses) Update(vMwareMachineClass *machine.VMwareMachineClass) (result *machine.VMwareMachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(vmwaremachineclassesResource, c.ns, vMwareMachineClass), &machine.VMwareMachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*machine.VMwareMachineClass), err
}

// Delete takes name of the vMwareMachineClass and deletes it. Returns an error if one occurs.
func (c *FakeVMwareMachineClasses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(vmwaremachineclassesResource, c.ns, name), &machine.VMwareMachineClass{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVMwareMachineClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(vmwaremachineclassesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &machine.VMwareMachineClassList{})
	return err
}

// Patch applies the patch and returns the patched vMwareMachineClass.
func (c *FakeVMwareMachineClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machine.VMwareMachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(vmwaremachineclassesResource, c.ns, name, data, subresources...), &machine.VMwareMachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*machine.VMwareMachineClass), err
}

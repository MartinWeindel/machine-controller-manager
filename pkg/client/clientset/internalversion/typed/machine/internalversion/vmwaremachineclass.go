// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	machine "github.com/gardener/machine-controller-manager/pkg/apis/machine"
	scheme "github.com/gardener/machine-controller-manager/pkg/client/clientset/internalversion/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VMwareMachineClassesGetter has a method to return a VMwareMachineClassInterface.
// A group's client should implement this interface.
type VMwareMachineClassesGetter interface {
	VMwareMachineClasses(namespace string) VMwareMachineClassInterface
}

// VMwareMachineClassInterface has methods to work with VMwareMachineClass resources.
type VMwareMachineClassInterface interface {
	Create(*machine.VMwareMachineClass) (*machine.VMwareMachineClass, error)
	Update(*machine.VMwareMachineClass) (*machine.VMwareMachineClass, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*machine.VMwareMachineClass, error)
	List(opts v1.ListOptions) (*machine.VMwareMachineClassList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machine.VMwareMachineClass, err error)
	VMwareMachineClassExpansion
}

// vMwareMachineClasses implements VMwareMachineClassInterface
type vMwareMachineClasses struct {
	client rest.Interface
	ns     string
}

// newVMwareMachineClasses returns a VMwareMachineClasses
func newVMwareMachineClasses(c *MachineClient, namespace string) *vMwareMachineClasses {
	return &vMwareMachineClasses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the vMwareMachineClass, and returns the corresponding vMwareMachineClass object, and an error if there is any.
func (c *vMwareMachineClasses) Get(name string, options v1.GetOptions) (result *machine.VMwareMachineClass, err error) {
	result = &machine.VMwareMachineClass{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VMwareMachineClasses that match those selectors.
func (c *vMwareMachineClasses) List(opts v1.ListOptions) (result *machine.VMwareMachineClassList, err error) {
	result = &machine.VMwareMachineClassList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested vMwareMachineClasses.
func (c *vMwareMachineClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a vMwareMachineClass and creates it.  Returns the server's representation of the vMwareMachineClass, and an error, if there is any.
func (c *vMwareMachineClasses) Create(vMwareMachineClass *machine.VMwareMachineClass) (result *machine.VMwareMachineClass, err error) {
	result = &machine.VMwareMachineClass{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		Body(vMwareMachineClass).
		Do().
		Into(result)
	return
}

// Update takes the representation of a vMwareMachineClass and updates it. Returns the server's representation of the vMwareMachineClass, and an error, if there is any.
func (c *vMwareMachineClasses) Update(vMwareMachineClass *machine.VMwareMachineClass) (result *machine.VMwareMachineClass, err error) {
	result = &machine.VMwareMachineClass{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		Name(vMwareMachineClass.Name).
		Body(vMwareMachineClass).
		Do().
		Into(result)
	return
}

// Delete takes name of the vMwareMachineClass and deletes it. Returns an error if one occurs.
func (c *vMwareMachineClasses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *vMwareMachineClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched vMwareMachineClass.
func (c *vMwareMachineClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machine.VMwareMachineClass, err error) {
	result = &machine.VMwareMachineClass{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("vmwaremachineclasses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
